/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ShortTabName
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var ShortTabName = class extends import_obsidian.Plugin {
  async renameTab() {
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    leaves.forEach((leaf) => {
      var _a;
      const view = leaf.view;
      if (view == null ? void 0 : view.file) {
        const file = view.file;
        const cache = this.app.metadataCache.getFileCache(file);
        const frontmatterTitle = (_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a.title;
        const tabHeaderEl = leaf.tabHeaderEl;
        if (tabHeaderEl) {
          const titleEl = tabHeaderEl.querySelector(".workspace-tab-header-inner-title");
          if (titleEl) {
            titleEl.setText(frontmatterTitle || file.basename);
          }
          tabHeaderEl.setAttribute("aria-label", frontmatterTitle || file.basename);
          tabHeaderEl.setAttribute("title", frontmatterTitle || file.basename);
        }
      }
    });
  }
  async onload() {
    await this.renameTab();
    this.registerEvent(
      this.app.workspace.on("layout-change", () => this.renameTab())
    );
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => this.renameTab())
    );
    this.registerEvent(
      this.app.workspace.on("file-open", () => this.renameTab())
    );
    this.registerEvent(
      this.app.vault.on("rename", () => this.renameTab())
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", () => this.renameTab())
    );
  }
  onunload() {
  }
};

/* nosourcemap */